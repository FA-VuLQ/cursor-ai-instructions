---
description: 
globs: 
alwaysApply: false
---
name: Go Code Review
description: Comprehensive guidelines for reviewing Go code
author: Generated by AI
tags: ["go", "code-review", "best-practices", "golang"]
fileglobs: ["**/*.go"]

# Go Code Review Guidelines

When reviewing Go code, check for these important aspects:

## Code Structure and Organization
- Packages follow single responsibility principle
- Package names are short, lowercase, and descriptive
- Files are organized logically within packages
- Code follows Go standard project layout

## Naming Conventions
- Use camelCase for variable and function names (exportedFunc, localVar)
- Use PascalCase for exported names (PublicFunction, ExportedType)
- Short variable names in small scopes, descriptive names in larger scopes
- Constants use ALL_CAPS with underscores for multi-word names

## Error Handling
- Errors are always checked
- Error messages are descriptive and follow consistent format
- No panic() in production code except for unrecoverable situations
- Return errors rather than logging and continuing

## Concurrency
- Proper use of goroutines with appropriate termination
- Channel usage is clear and well-documented
- Mutexes are used correctly to protect shared data
- No data races (verify with race detector)
- Context is properly passed and respected for cancellation

## Performance
- Avoid unnecessary memory allocations
- Preallocate slices when size is known
- Use buffered channels appropriately
- Implement io.Reader/io.Writer interfaces where appropriate
- Use sync.Pool for frequently allocated objects

## Testing
- All packages have tests with good coverage
- Table-driven tests are used where appropriate
- Test helpers follow t.Helper() pattern
- Benchmark tests for performance-critical code
- Mock external dependencies for unit tests

## Documentation
- All exported functions, types, and variables have comments
- Comments explain "why" not just "what"
- Examples provided for complex functions
- Package overview comment exists

## Dependencies
- External dependencies are minimized
- Vendor dependencies are properly managed
- No circular dependencies between packages
- Dependency versions are pinned

## Security
- Input validation for all external data
- No hardcoded credentials or sensitive information
- SQL queries use parameterized statements
- Proper handling of file paths to prevent path traversal

## Style and Formatting
- Code is formatted with gofmt or goimports
- Line length is reasonable (< 100-120 chars)
- No unnecessary comments
- No commented-out code
- Consistent indentation and spacing
